@title: Ruby code article.
@author: John Smith
@tags: ruby testing

Let's take a look at some awesome Ruby code!

<code lang="ruby">
class Admin::ArticlesController < ApplicationController
  respond_to :html, :txt

  before_filter :authenticate_admin

  def new
    expose(:article, Article.new)
  end

  def edit
    expose(:article, Article.find_by_params(params))
  end

  def show
    expose(:article, Article.find_by_params(params))
  end

  def create
    if params[:article][:file]
      @article = Article.new_article_from_file(params[:article][:file].tempfile)
    else
      @article = Article.new(params[:article])
    end
    redirect_or_render(admin_path, :new) do
      @article.save
    end
  end

  def update
    @article = Article.find_by_params(params)
    redirect_or_render(admin_path, :edit) do
      @article.update_attributes(params[:article])
    end
  end

  def destroy
    Article.find_by_params(params).destroy
    redirect_to admin_path
  end

  def commit
    notice = commit_notice(Article.find_by_params(params).commit)
    redirect_to admin_path, :notice => notice
  end

  def publish
    notice = publish_notice(Article.find_by_params(params).publish)
    redirect_to admin_path, :notice => notice
  end

  def unpublish
    Article.find_by_params(params).unpublish
    redirect_to admin_path, :notice => "Unpublished."
  end

  private
  
  def commit_notice(b)
    b ? "Committed!" : "Unable to commit at this time."
  end

  def publish_notice(b)
    b ? "Published!" : "Unable to publish at this time."
  end
end
</code>

<code lang="ruby">
module ApplicationHelper

  def get_config(sym)
    Site::Application.config.send(sym)
  end

  def construct_title(title = nil)
    a = if title.blank?
      get_config(:main_title)
    else
      "#{title} | #{get_config(:main_title)}"
    end
    content_for :title, a
  end

  def add_header(title)
    construct_title(title)
    "<h3>#{title}</h3>".html_safe
  end

  def error_for(sym, model, extra = "")
    if model.errors[sym].length > 0
      "<span class='field-error'>#{model.errors[sym].first}</span>#{extra}".html_safe
    end
  end

  # Smarter content snipping.
  def snip_content(content)
    l = get_config(:short_content_length)
    return content if content.length <= l

    i = l + content[l..-1].index(/[!\?\.;,\s%]|$/)
    i = l if i.nil? or i - 15 > l
    content[0...i] + "..."
  end

end
</code>

<code lang="ruby">
class Article < ActiveRecord::Base
  include ArticlesHelper

  has_many :taggings
  has_many :tags, :through => :taggings

  validates_presence_of :title, :author, :content

  scope :publishable,  lambda { where("published_at IS NOT NULL") }
  scope :latest_first, lambda { order("created_at DESC") }
  scope :updated_desc, lambda { order("updated_at DESC") }
  scope :frontpage,    lambda { publishable.latest_first }

  before_save :process_content_for_html

  attr_accessor :file

  def to_param
    "#{self.id}-#{self.title.parameterize}"
  end

  def tag_list=(list)
    self.tags = Tag.find_by_keywords(list.split(' '))
  end

  def tag_list
    self.tags.map(&:keyword).join(' ')
  end

  def next
    nil unless next_available?
    Article.publishable.order("id ASC").where("id > ?", self.id).limit(1).first
  end

  def prev
    nil unless prev_available?
    Article.publishable.order("id DESC").where("id < ?", self.id).limit(1).first
  end 

  def next_available?
    Article.frontpage.where("id > ?", self.id).count > 0
  end

  def prev_available?
    Article.frontpage.where("id < ?", self.id).count > 0
  end

  def can_make_milestone_commit?
    return true if self.last_commit_date.nil?

    delta = Site::Application.config.required_commit_time_delta
    a = self.last_commit_date + delta.hour
    Time.zone.now > a
  end

  def can_be_published?
    self.stage >= Site::Application.config.required_milestone_commits 
  end

  def recently_updated?
    self.published_at && self.published_at < self.updated_at
  end

  def commit
    return false unless can_make_milestone_commit?
    self.stage += 1
    self.last_commit_date = Time.zone.now
    self.save
  end

  def publish
    return false unless can_be_published?
    self.update_attributes :published_at => Time.zone.now
  end

  def unpublish
    self.update_attributes :published_at => nil
  end

  def process_content_for_html
    self.content_html = ArticleProcessing.process_content(self.content)
  end

  def self.new_article_from_file(path)
    content = File.read(path)
    Article.new(ArticleProcessing.process_input_file(content))
  end

  def self.available_pages
    (Article.count.to_f / Site::Application.config.articles_in_page).ceil
  end

  def self.get_quantity(quantity = 1, offset = 0)
    frontpage.offset(offset).limit(quantity)
  end

  def self.find_by_params(params)
    find(params[:id].to_i)
  end

  def self.find_by_tags(tags)
    publishable.find(:all, :include => :tags, :conditions => ["tags.keyword IN (?)", tags])
  end

end
</code>
